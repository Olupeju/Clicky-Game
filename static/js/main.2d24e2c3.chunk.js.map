{"version":3,"sources":["components/Card/Card.js","components/Title/Title.js","components/Wrapper/Wrapper.js","components/Navpills/Navpills.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","name","src","image","id","onClick","selectCard","Title","Wrapper","children","Navpills","href","message","indexOf","style","color","currentScore","topScore","App","state","card","unselectedCards","shuffleArray","array","i","length","j","Math","floor","random","_ref","undefined","_this","find","item","setState","newCards","filter","_this2","this","components_Wrapper_Wrapper","components_Navpills_Navpills","components_Title_Title","map","components_Card_Card","Object","defineProperty","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d24e2c3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport  \"./Card.css\";\r\n\r\n\r\n//this component is only rendering the images to the screen and can be a simple render function it is a\r\n//stateless component\r\nconst Card = props => (\r\n  <div className=\"card\"> \r\n      <img alt={props.name} src={props.image} id={props.id}\r\n        onClick={() => props.selectCard(props.id)} className='shuffleTitle'/>\r\n  </div>\r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./Title.css\";\r\n\r\n\r\n//stateless component\r\nconst Title = props => (\r\n  <div className=\"titlebox\">\r\n    <h1>Clicky Game</h1>\r\n    <p>Clicky on image to earn points, but don't click on any more than once!</p> \r\n  </div>\r\n);\r\n\r\nexport default Title;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\n//stateless component\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Navpills.css\";\r\n\r\nconst Navpills = props => (\r\n    <div>\r\n        <ul className=\"nav nav-pills nav-justified\">\r\n            <li><a href=\"/\">Clicky Game</a></li>\r\n            <li\r\n                className={props.message.indexOf(\"wrong\") !== -1 ? \r\n                    \"desc-wrong\" : \r\n                    props.message.indexOf(\"wright\") !== -1 ?\r\n                        \"desc-right\" :\r\n                        \"desc-normal\"}\r\n            >\r\n                {props.message}\r\n            </li>\r\n            <li>Score: <span style={{color: \"yellow\"}}>{props.currentScore}</span> | Top Score: {props.topScore}</li>\r\n        </ul>\r\n    </div>\r\n);\r\n\r\nexport default Navpills;\r\n\r\n","/* eslint-disable no-undef */\nimport React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Card from \"./components/Card\";\nimport Title from \"./components/Title\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navpills from \"./components/Navpills\"\nimport card from \"./card.json\";\n\nclass App extends Component {\n   // Setting this.state.card to the card json array\n   state = {\n     card, \n     message:\"Click an image to begin!\",\n     topScore:0,\n     currentScore:0,\n     unselectedCards: card\n   }\n\n\n  // When the page loads and the component mounts,\n  // display starting message\n  // componentDidMount() {\n\n    \n  // }\n  shuffleArray = array =>{\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  // When a Card gets clicked,\n  // increase points and add id of element to array.\n  selectCard = (id) => {\n    let findCard = this.state.unselectedCards.find(item => item.id === id);\n    if (findCard === undefined){\n      this.setState({\n        message:\"Your guessed is wrong!\",\n        topScore:(this.state.currentScore > this.state.topScore) ? this.state.currentScore : this.state.topScore,\n        // topScore: 0,\n        currentScore:0,\n        card:card,\n        unselectedCards:card\n      });\n    }\n    else{\n      const newCards = this.state.unselectedCards.filter(item => item.id !== id);\n      this.setState({\n        message:\"You guessed right\",\n        currentScore:this.state.currentScore + 1,\n        card:card,\n        unselectedCards:newCards\n      });\n    }\n    this.shuffleArray(card);\n  };\n  render() {\n    return(\n      <Wrapper>\n        <Navpills\n           message={this.state.message}\n           currentScore={this.state.currentScore}\n           topScore={this.state.topScore}\n        />\n           <Title/>\n           {\n             this.state.card.map(card => (\n             <Card\n             key = {card.id}\n             id ={card.id}\n             name = {card.name}\n             image={card.image}\n             selectCard={this.selectCard}\n             currentScore={this.state.currentScore}\n             selectCard= {this.selectCard}\n             />\n             ))\n           }\n\n        </Wrapper>\n    );\n  }\n  }\n\n export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}